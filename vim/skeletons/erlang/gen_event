-module($MODULENAME).
-behaviour(gen_event).
-export([ % API
         start_link/0,
         add_handler/2
        ]).
-export([ % Behaviour
         init/1,
         handle_event/2,
         handle_call/2,
         handle_info/2,
         terminate/2,
         code_change/3
        ]).



%% API ============================================================= %
%% start_link/0
%% -------------------------------------------------------------------
%% @doc
%% Creates an event manager
-spec(start_link()
      -> Result when
      Result :: {ok, Pid} | {error, Error},
      Pid    :: pid(),
      Error  :: term()).
%% ----------------------------------------------------------------- %
start_link() ->
    gen_event:start_link({local, ?MODULE}).

%% add_handler/2
%% -------------------------------------------------------------------
%% @doc
%% Adds an event handler
-spec(add_handler(Handler, Args)
      -> Result when
      Result  ::  ok | {'EXIT', Reason} | term(),
      Reason  :: term(),
      % @todo specify Handler and Args
      Handler :: term(),
      Args    :: term()).
%% ----------------------------------------------------------------- %
add_handler(Handler, Args) ->
    gen_event:add_handler(?MODULE, Handler, Args).



%% Behaviour ======================================================= %
-record(state, {}).

%% init/1
%% -------------------------------------------------------------------
%% @doc <a href="http://goo.gl/mhlbsA">gen_event:init/1</a>
-spec(init(InitArgs)
      -> Result when
    InitArgs :: Args | {Args, Term :: term()},
    Args     :: term(),
    Result
    :: {ok, State}
    |  {ok, State, hibernate}
    |  {error, Reason :: term()},
    State :: term()).
%% ----------------------------------------------------------------- %
init([]) ->
    {ok, #state{}}.


%% handle_event/2
%% -------------------------------------------------------------------
%% @doc <a href="http://goo.gl/mkixek">gen_event:handle_event/2</a>
-spec(handle_event(Event :: term(), State :: term())
      -> Result when
    Result
    :: {ok, NewState}
    |  {ok, NewState, hibernate}
    |  {swap_handlers, Args1, NewState, Handler2, Args2}
    |   remove_handler,
    NewState :: term(),
    Args1    :: term(),
    Args2    :: term(),
    Handler2 :: Module2 | {Module2, Id :: term()},
    Module2  :: atom()).
%% ----------------------------------------------------------------- %
handle_event(_Event, State) ->
    {ok, State}.


%% handle_call/2
%% -------------------------------------------------------------------
%% @doc <a href="http://goo.gl/Vobc0i">gen_event:handle_call/2</a>
-spec(handle_call(Request :: term(), State :: term())
      -> Result when
    Result
    :: {ok, Reply, NewState}
    |  {ok, Reply, NewState, hibernate}
    |  {swap_handler, Reply, Args1, NewState, Handler2, Args2}
    |  {remove_handler, Reply},
    Reply    :: term(),
    NewState :: term(),
    Args1    :: term(),
    Args2    :: term(),
    Handler2 :: Module2 | {Module2, Id :: term()},
    Module2  :: atom()).
%% ----------------------------------------------------------------- %
handle_call(_Request, State) ->
    Reply = ok,
    {ok, Reply, State}.


%% handle_info/2
%% -------------------------------------------------------------------
%% @doc <a href="http://goo.gl/H8f2fX">gen_event:handle_info/2</a>
-spec(handle_info(Info :: term(), State :: term())
      -> Result when
    Result
    :: {ok, NewState}
    |  {ok, NewState, hibernate}
    |  {swap_handler, Args1, NewState, Handler2, Args2}
    |   remove_handler,
    NewState :: term(),
    Args1    :: term(),
    Args2    :: term(),
    Handler2 :: Module2 | {Module2, Id :: term()},
    Module2  :: atom()).
%% ----------------------------------------------------------------- %
handle_info(_Info, State) ->
    {ok, State}.


%% terminate/2
%% -------------------------------------------------------------------
%% @doc <a href="http://goo.gl/lJ6gqN">gen_event:terminate/2</a>
-spec(terminate(Arg, State :: term())
      -> Result when
      Result :: term(),
      Arg    :: Args
      | {stop, Reason}
      |  stop
      |  remove_handler
      | {error, {'EXIT', Reason}}
      | {error, Term :: term()},
      Args   :: term(),
      Reason :: term()).
%% ----------------------------------------------------------------- %
terminate(_Arg, _State) ->
    ok.


%% code_change/3
%% -------------------------------------------------------------------
%% @doc <a href="http://goo.gl/jkJk88">gen_event:code_change/3</a>
-spec(code_change(OldVsn, State :: term(), Extra :: term())
      -> Result  when
      Result :: {ok, NewState :: term()},
      OldVsn :: Vsn | {down, Vsn},
      Vsn    :: term()).
%% ----------------------------------------------------------------- %
code_change(_OldVsn, State, _Extra) ->
    {ok, State}.



%% Private ========================================================= %

