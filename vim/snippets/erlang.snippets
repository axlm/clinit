snippet anx_module
	-module(`expand("%:t:r")`).
	-export([ % API
	         my_func/0
	        ]).



	%% API ============================================================= %
	%% my_func/0
	%% -------------------------------------------------------------------
	%% @doc
	%% @todo -spec().
	%% ----------------------------------------------------------------- %
	my_func() ->
	    ok.



	%% Private ========================================================= %


snippet anx_supervisor_utilities
	-define(F, start_link).

	-define(PERMANENT(Id, M, F, A, TO, T),
			#{id       => Id,        % internal child spec id for supervisor
			  start    => {M, F, A}, % module, function, arguments to start chile process
			  restart  => permanent, % a child process will allways be restarted
			  shutdown => TO,        % how long to wait for a child process to shut down
			  type     => T,         % type of process. worker or supervisor?
			  modules  => [M]}).     % implementation module(s) for behaviour
	-define(TRANSIENT(Id, M, F, A, TO, T),
			#{id       => Id,
			  start    => {M, F, A},
			  restart  => transient, % a child process will be restarted on error
			  shutdown => TO,
			  type     => T,
			  modules  => [M]}).
	-define(TEMPORARY(Id, M, F, A, TO, T),
			#{id       => Id,
			  start    => {M, F, A},
			  restart  => temporary, % a child process will never be restarted
			  shutdown => TO,
			  type     => T,
			  modules  => [M]}).

	-define(PERMANENT(Id, M, A, TO, T),         ?PERMANENT(Id, M, ?F, A, TO, T)).
	-define(TRANSIENT(Id, M, A, TO, T),         ?TRANSIENT(Id, M, ?F, A, TO, T)).
	-define(TEMPORARY(Id, M, A, TO, T),         ?TEMPORARY(Id, M, ?F, A, TO, T)).

	-define(PERMANENT_WORKER(Id, M, A),         ?PERMANENT_WORKER(Id, M, A, 5000)).
	-define(PERMANENT_WORKER(Id, M, A, TO),     ?PERMANENT(Id, M, A, TO, worker)).
	-define(PERMANENT_SUPERVISOR(Id, M, A),     ?PERMANENT_SUPERVISOR(Id, M, A, infinity)).
	-define(PERMANENT_SUPERVISOR(Id, M, A, TO), ?PERMANENT(Id, M, A, TO, supervisor)).

	-define(TRANSIENT_WORKER(Id, M, A),         ?TRANSIENT_WORKER(Id, M, A, 5000)).
	-define(TRANSIENT_WORKER(Id, M, A, TO),     ?TRANSIENT(Id, M, A, TO, worker)).
	-define(TRANSIENT_SUPERVISOR(Id, M, A),     ?TRANSIENT_SUPERVISOR(Id, M, A, infinity)).
	-define(TRANSIENT_SUPERVISOR(Id, M, A, TO), ?TRANSIENT(Id, M, A, TO, supervisor)).

	-define(TEMPORARY_WORKER(Id, M, A),         ?TEMPORARY_WORKER(Id, M, A, 5000)).
	-define(TEMPORARY_WORKER(Id, M, A, TO),     ?TEMPORARY(Id, M, A, TO, worker)).
	-define(TEMPORARY_SUPERVISOR(Id, M, A),     ?TEMPORARY_SUPERVISOR(Id, M, A, infinity)).
	-define(TEMPORARY_SUPERVISOR(Id, M, A, TO), ?TEMPORARY(Id, M, A, TO, supervisor)).

	-define(RESTART_ALL(I, P), 
			#{strategy  => one_for_all, % strategy
			  intensity => I,           % intensity
			  period    => P}).         % period
	-define(RESTART_REST(I, P),
			#{strategy  => rest_for_one,
			  intensity => I,
			  period    => P}).
	-define(RESTART_FAILED(I, P),
			#{strategy  => one_for_one,
			  intensity => I,
			  period    => P}).
	-define(RECYCLE(I, P),
			#{strategy  => simple_one_for_one,
			  intensity => I,
			  period    => P}).

snippet anx_function
	%% ${1:function}/${2:arity}
	%% -------------------------------------------------------------------
	%% @doc
	%% @todo -spec().
	%% ----------------------------------------------------------------- %
	$1(${3:parameters}) ->
	    ok.

snippet anx_module_documentation
	%%%-------------------------------------------------------------------
	%%% @author Axl Mattheus <${1:application}@annaxxko.net>
	%%% [http://www.annaxxko.net/$1]
	%%% @copyright © `strftime("%Y")`, AnnaxxKØ (Pty) Ltd
	%%% @license [http://www.annaxxko.net/$1/lisence.html]
	%%% @doc 
	%%% @end
	%%%----------------------------------------------------------------- %

snippet anx_macro_this
	-define(THIS, ?MODULE).

snippet anx_macro_server
	-define(SERVER, ?MODULE).

snippet anx_start_link0
	%% start_link/0
	%%--------------------------------------------------------------------
	%% @doc Start the controller
	%% @todo -spec().
	%%------------------------------------------------------------------ %
	start_link() ->
	    gen_server:start_link({local, ?SERVER}, ?SERVER, [], []).

snippet anx_start_linkN
	%% start_link/${1:arity}
	%%--------------------------------------------------------------------
	%% @doc Start the process
	%% @todo -spec().
	%%------------------------------------------------------------------ %
	start_link(${2:parameters}) ->
	    gen_server:start_link({local, ?SERVER}, ?SERVER, [$2], []).

snippet anx_start
	%% start/0
	%%--------------------------------------------------------------------
	%% @doc Start the process
	%% @todo -spec().
	%%------------------------------------------------------------------ %
	start() ->
		start_link().

snippet anx_stop
	%% stop/0
	%%--------------------------------------------------------------------
	%% @doc Stop the process
	%% @todo -spec().
	%%------------------------------------------------------------------ %
	stop() ->
		gen_server:cast(?SERVER, stop).

	handle_cast(stop, State) ->
		{stop, normal, State};

snippet anx_call0
	%% $2/0
	%%--------------------------------------------------------------------
	%% @doc ${1:documentation}
	%% @todo -spec().
	%%------------------------------------------------------------------ %
	${2:name}() ->
		gen_server:call(?SERVER, $2).

	handle_call($2, _From, State) ->
		Result = ok,
		{reply, Result, State};

snippet anx_callN
	%% $2/${4:arity}
	%%--------------------------------------------------------------------
	%% @doc ${1:documentation}
	%% @todo -spec().
	%%------------------------------------------------------------------ %
	${2:name}(${3:parameters}) ->
		gen_server:call(?SERVER, {$2, $3}).

	handle_call({$2, $3}, _From, State) ->
		Result = ok,
		{reply, Result, State};

snippet anx_cast0
	%% $2/0
	%%--------------------------------------------------------------------
	%% @doc ${1:documentation}
	%% @todo -spec().
	%%------------------------------------------------------------------ %
	${2:name}() ->
		gen_server:cast(?SERVER, $2).

	handle_cast($2, _From, State) ->
		Result = ok,
		{reply, Result, State};

snippet anx_castN
	%% $2/${4:arity}
	%%--------------------------------------------------------------------
	%% @doc ${1:documentation}
	%% @todo -spec().
	%%------------------------------------------------------------------ %
	${2:name}(${3:parameters}) ->
		gen_server:cast(?SERVER, {$2, $3}).

	handle_cast({$2, $3}, _From, State) ->
		Result = ok,
		{reply, Result, State};

snippet anx_eunit
	${1:name}_test() ->
		 ?assert(true == true).

snippet anx_eunit_generator
	${1:name}_test_() ->
		{"${2:description}",
		 [?_assert(true == true)]}.

snippet anx_eunit_setup1
	${1:name}_test_() ->
		{"${2:description}",
		 {setup,
		  % local | spawn | {spawn, node()},
		  setup_initialize/0,
		  setup_finalize/1,
		  ${3:test}/1}}.

	setup_initialize() ->
		${4:Arg}.

	setup_finalize($4) ->
		ok.

	$3($4) ->
		ok.

snippet anx_eunit_setupN
	${1:name}_test_() ->
		{"${2:description}",
		 {setup,
		  % local | spawn | {spawn, node()},
		  setup_initialize/0,
		  setup_finalize/1,
		  [${3:test}/1, ${4:another_test}/1]}}.

	setup_initialize() ->
		${5:Arg}.

	setup_finalize($5) ->
		ok.

	$3($5) ->
		?_assert($5).

	$4($5) ->
		?_assert($5).

snippet anx_eunit_foreach
	${1:name}_test_() ->
		{"${2:description}",
		 {foreach,
		  % local | spawn | {spawn, node()},
		  setup_initialize/0,
		  ${4:teardown_fun}/1,
		  [${5:test}/1, ${6:another_test}/1]}}.

	$3() ->
		${7:Arg}.

	$5($7) ->
		?_assert($7).

	$6($7) ->
		?_assert($7).

	$4($7) ->
		ok.

snippet anx_eunit_spawn
	{spawn, []}

snippet anx_eunit_inparallel
	{inparallel, []}

snippet anx_eunit_timeout
	{timeout, ${1:timeout}, []}

snippet anx_application_resource_file
	{application,    Name,              % Name         atom()               -
	 [{description,  Description},      % Description  string()             ""
	  {id,           Id},               % Id           string()             ""
	  {vsn,          Version},          % Version      string()             ""
	  {mod,          Start},            % Start        {Module,StartArgs}   []
	  {applications, Apps},             % Apps         [App]                []
	  {included_applications, Apps},    % Apps         [App]                []
	  {modules,      Modules},          % Modules      [Module]             []
	  {registered,   Names},            % Names        [Name]               []
	  {env,          Env},              % Env          [{Par,Val}]          []
	  {ttr,          TimeToRun},        % TimeToRun    int()                infinity
	  {start_phases, Phases},           % Phases       [{Phase,PhaseArgs}]  undefined
	  {runtime_dependencies, RTDeps}]}. % RTDeps       [ApplicationVersion] []
	                                    %   Module, Name, App, Par, Phase   atom()
	                                    %   Val, StartArgs, PhaseArgs       term()
	                                    %   ApplicationVersion              string()

snippet anx_make_file
	PROJECT=${1:project_name}
	include erlang.mk

snippet	anx_license_isc
	% Copyright © `strftime("%Y")`, Axl Mattheus, license@annaxxko.net
	%
	% Permission to use, copy, modify, and/or distribute this software for any
	% purpose with or without fee is hereby granted, provided that the above
	% copyright notice and this permission notice appear in all copies.
	%
	% THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
	% WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
	% MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
	% ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
	% WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
	% ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
	% OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

snippet	anx_license_3bsd
	% Copyright © `strftime("%Y")`, Axl Mattheus, license@annaxxko.net
	% All rights reserved.
	% 
	% Redistribution and use in source and binary forms, with or without
	% modification, are permitted provided that the following conditions are met:
	% 
	% * Redistributions of source code must retain the above copyright notice, this
	%   list of conditions and the following disclaimer.
	% 
	% * Redistributions in binary form must reproduce the above copyright notice,
	%   this list of conditions and the following disclaimer in the documentation
	%   and/or other materials provided with the distribution.
	% 
	% * Neither the name of [project] nor the names of its
	%   contributors may be used to endorse or promote products derived from
	%   this software without specific prior written permission.
	% 
	% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	% AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	% IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	% DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
	% FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
	% DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
	% SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
	% CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
	% OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
	% OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

