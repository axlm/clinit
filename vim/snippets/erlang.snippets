snippet anx_module
	-module(`expand("%:t:r")`).
	-export([ % API
	         my_func/0
	        ]).



	%% API ============================================================= %
	%% my_func/0
	%% -------------------------------------------------------------------
	%% @doc
	%% @todo -spec().
	%% ----------------------------------------------------------------- %
	my_func() ->
	    ok.



	%% Private ========================================================= %


snippet anx_supervisor_utilities
	-define(F, start_link).

	-define(PERMANENT(Id, M, F, A, TO, T),
			#{id       => Id,        % internal child spec id for supervisor
			  start    => {M, F, A}, % module, function, arguments to start chile process
			  restart  => permanent, % when shall a child process be restarted (allways)
			  shutdown => TO,        % how long to wait for a child process to shut down
			  type     => T,         % type of process. worker or supervisor?
			  modules  => [M]}).     % implementation module(s) for behaviour
	-define(TRANSIENT(Id, M, F, A, TO, T),
			#{id       => Id,
			  start    => {M, F, A},
			  restart  => transient, % when shall a child process be restarted (on error)
			  shutdown => TO,
			  type     => T,
			  modules  => [M]}).
	-define(TEMPORARY(Id, M, F, A, TO, T),
			#{id       => Id,
			  start    => {M, F, A},
			  restart  => temporary, % when shall a child process be restarted (never)
			  shutdown => TO,
			  type     => T,
			  modules  => [M]}).

	-define(PERMANENT(Id, M, A, TO, T),         ?PERMANENT(Id, M, ?F, A, TO, T)).
	-define(TRANSIENT(Id, M, A, TO, T),         ?TRANSIENT(Id, M, ?F, A, TO, T)).
	-define(TEMPORARY(Id, M, A, TO, T),         ?TEMPORARY(Id, M, ?F, A, TO, T)).

	-define(PERMANENT_WORKER(Id, M, A),         ?PERMANENT_WORKER(Id, M, A, 5000)).
	-define(PERMANENT_WORKER(Id, M, A, TO),     ?PERMANENT(Id, M, A, TO, worker)).
	-define(PERMANENT_SUPERVISOR(Id, M, A),     ?PERMANENT_SUPERVISOR(Id, M, A, infinity)).
	-define(PERMANENT_SUPERVISOR(Id, M, A, TO), ?PERMANENT(Id, M, A, TO, supervisor)).

	-define(TRANSIENT_WORKER(Id, M, A),         ?TRANSIENT_WORKER(Id, M, A, 5000)).
	-define(TRANSIENT_WORKER(Id, M, A, TO),     ?TRANSIENT(Id, M, A, TO, worker)).
	-define(TRANSIENT_SUPERVISOR(Id, M, A),     ?TRANSIENT_SUPERVISOR(Id, M, A, infinity)).
	-define(TRANSIENT_SUPERVISOR(Id, M, A, TO), ?TRANSIENT(Id, M, A, TO, supervisor)).

	-define(TEMPORARY_WORKER(Id, M, A),         ?TEMPORARY_WORKER(Id, M, A, 5000)).
	-define(TEMPORARY_WORKER(Id, M, A, TO),     ?TEMPORARY(Id, M, A, TO, worker)).
	-define(TEMPORARY_SUPERVISOR(Id, M, A),     ?TEMPORARY_SUPERVISOR(Id, M, A, infinity)).
	-define(TEMPORARY_SUPERVISOR(Id, M, A, TO), ?TEMPORARY(Id, M, A, TO, supervisor)).

	-define(RESTART_ALL    (N, T), {one_for_all,        N, T}).
	-define(RESTART_REST   (N, T), {rest_for_one,       N, T}).
	-define(RESTART_FAILED (N, T), {one_for_one,        N, T}).
	-define(RECYCLE        (N, T), {simple_one_for_one, N, T}).

snippet anx_function
	%% ${1:function}/${2:arity}
	%% -------------------------------------------------------------------
	%% @doc
	%% @todo -spec().
	%% ----------------------------------------------------------------- %
	$1(${3:parameters}) ->
	    ok.

snippet anx_module_documentation
	%%%-------------------------------------------------------------------
	%%% @author Axl Mattheus <${1:application}@annaxxko.net>
	%%% [http://www.annaxxko.net/$1]
	%%% @copyright © `strftime("%Y")`, AnnaxxKØ (Pty) Ltd
	%%% @license [http://www.annaxxko.net/$1/lisence.html]
	%%% @doc 
	%%% @end
	%%%----------------------------------------------------------------- %

snippet anx_macro_this
	-define(THIS, ?MODULE).

snippet anx_macro_server
	-define(SERVER, ?MODULE).

snippet anx_start_link0
	%% start_link/0
	%%--------------------------------------------------------------------
	%% @doc Start the controller
	%% @todo -spec().
	%%------------------------------------------------------------------ %
	start_link() ->
	    gen_server:start_link({local, ?SERVER}, ?SERVER, [], []).

snippet anx_start_linkN
	%% start_link/${1:arity}
	%%--------------------------------------------------------------------
	%% @doc Start the process
	%% @todo -spec().
	%%------------------------------------------------------------------ %
	start_link(${2:parameters}) ->
	    gen_server:start_link({local, ?SERVER}, ?SERVER, [$2], []).

snippet anx_start
	%% start/0
	%%--------------------------------------------------------------------
	%% @doc Start the process
	%% @todo -spec().
	%%------------------------------------------------------------------ %
	start() ->
		start_link().

snippet anx_stop
	%% stop/0
	%%--------------------------------------------------------------------
	%% @doc Stop the process
	%% @todo -spec().
	%%------------------------------------------------------------------ %
	stop() ->
		gen_server:cast(?SERVER, stop).

	handle_cast(stop, State) ->
		{stop, normal, State};

snippet anx_call0
	%% $2/0
	%%--------------------------------------------------------------------
	%% @doc ${1:documentation}
	%% @todo -spec().
	%%------------------------------------------------------------------ %
	${2:name}() ->
		gen_server:call(?SERVER, $2).

	handle_call($2, _From, State) ->
		Result = ok,
		{reply, Result, State};

snippet anx_callN
	%% $2/${4:arity}
	%%--------------------------------------------------------------------
	%% @doc ${1:documentation}
	%% @todo -spec().
	%%------------------------------------------------------------------ %
	${2:name}(${3:parameters}) ->
		gen_server:call(?SERVER, {$2, $3}).

	handle_call({$2, $3}, _From, State) ->
		Result = ok,
		{reply, Result, State};

snippet anx_cast0
	%% $2/0
	%%--------------------------------------------------------------------
	%% @doc ${1:documentation}
	%% @todo -spec().
	%%------------------------------------------------------------------ %
	${2:name}() ->
		gen_server:cast(?SERVER, $2).

	handle_cast($2, _From, State) ->
		Result = ok,
		{reply, Result, State};

snippet anx_castN
	%% $2/${4:arity}
	%%--------------------------------------------------------------------
	%% @doc ${1:documentation}
	%% @todo -spec().
	%%------------------------------------------------------------------ %
	${2:name}(${3:parameters}) ->
		gen_server:cast(?SERVER, {$2, $3}).

	handle_cast({$2, $3}, _From, State) ->
		Result = ok,
		{reply, Result, State};

snippet anx_test
	${1:name}_test_() ->
		{"${2:description}",
		 [?_assert(true == true)]
		}.

snippet anx_application_resource_file
	{application,    Name,              % Name         atom()               -
	 [{description,  Description},      % Description  string()             ""
	  {id,           Id},               % Id           string()             ""
	  {vsn,          Version},          % Version      string()             ""
	  {mod,          Start},            % Start        {Module,StartArgs}   []
	  {applications, Apps},             % Apps         [App]                []
	  {included_applications, Apps},    % Apps         [App]                []
	  {modules,      Modules},          % Modules      [Module]             []
	  {registered,   Names},            % Names        [Name]               []
	  {env,          Env},              % Env          [{Par,Val}]          []
	  {ttr,          TimeToRun},        % TimeToRun    int()                infinity
	  {start_phases, Phases},           % Phases       [{Phase,PhaseArgs}]  undefined
	  {runtime_dependencies, RTDeps}]}. % RTDeps       [ApplicationVersion] []
	                                    %   Module, Name, App, Par, Phase   atom()
	                                    %   Val, StartArgs, PhaseArgs       term()
	                                    %   ApplicationVersion              string()

snippet anx_make_file
	PROJECT=${1:project_name}
	include erlang.mk
	
