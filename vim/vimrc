filetype off

execute pathogen#infect()
execute pathogen#helptags()

" ---------------------------------------------------------------------------
" operational settings
filetype indent plugin on       " automatic file type detection
set modeline                    " turn on modeline
set cursorline                  " highlight current line
set nocompatible                " vim defaults, not vi!
set hidden                      " allow editing multiple unsaved buffers
set more                        " the 'more' prompt
set autoread                    " watch for file changes by other programs
set visualbell                  " visual beep
set backup                      " produce *~ backup files
set noautowrite                 " don't automatically write on :next, etc
set wildmenu                    " : menu has tab completion, etc
set scrolloff=5                 " keep at least 5 lines above/below cursor
set sidescrolloff=5             " keep at least 5 columns left/right of cursor
set history=200                 " remember the last 200 commands
set shell=bash
syntax enable
syntax on                       " syntax on

" ---------------------------------------------------------------------------
" syntastic settings
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list            = 1
let g:syntastic_check_on_open            = 1
let g:syntastic_check_on_wq              = 0

" ---------------------------------------------------------------------------
" backup settings
set backupdir=~/.vimbackups,.
set directory=~/.vimbackups,.
au BufWritePre * let &bex = '@' . strftime("%Y-%m-%dT%H:%M:%S")

" ---------------------------------------------------------------------------
" window spacing
set cmdheight=2                 " make command line two lines high
set lazyredraw                  " don't redraw when running macros
set number                      " show line number on each line
set relativenumber              " show relative line number
set laststatus=2

" ---------------------------------------------------------------------------
" mouse settings
set mouse=a                     " mouse support in all modes
set mousehide                   " hide the mouse when typing text

" ,p and shift-insert will paste the X buffer, even on the command line
nmap <LocalLeader>p i<S-MiddleMouse><ESC>
imap <S-Insert> <S-MiddleMouse>
cmap <S-Insert> <S-MiddleMouse>

" this makes the mouse paste a block of text without formatting it
" (good for code)
map <MouseMiddle> <esc>"*p

" ---------------------------------------------------------------------------
" global editing settings
set autoindent smartindent      " turn on auto/smart indenting
set expandtab                   " use spaces, not tabs
set smarttab                    " make <tab> and <backspace> smarter
set tabstop=4                   " tabstops of 4
set softtabstop=4
set shiftwidth=4                " indents of 4
set backspace=eol,start,indent  " allow backspacing over indent, eol, & start
set colorcolumn=90              " right margin at 90 columns
set undolevels=100              " number of forgivable mistakes
set updatecount=100             " write swap file to disk every 100 chars
set complete=.,w,b,u,U,t,i,d    " do lots of scanning on tab completion
set viminfo=%100,'100,/100,h,\"500,:100,n~/.viminfo
set linebreak

" ---------------------------------------------------------------------------
" searching...
set incsearch                  " show matches as soon as possible
set hlsearch                   " enable search highlight globally
set showmatch                  " show matching brackets when typing

set diffopt=filler,iwhite       " ignore all whitespace and sync

" ---------------------------------------------------------------------------
" some useful mappings
" Y yanks from cursor to $
map Y y$
" word swapping
nmap <silent> gw "_yiw:s/\(\%#\w\+\)\(\W\+\)\(\w\+\)/\3\2\1/<cr><c-o><c-l>
" char swapping
nmap <silent> gc xph
" toggle Undo Tree...
nnoremap <F8> :GundoToggle<CR>
" yep, toggle NERDTree...
nmap <F9> :NERDTreeToggle<CR>
" and TagBar too...
nmap <F10> :TagbarToggle<CR>
" toggle invisible characters
set listchars=tab:▸\ ,eol:¬
nmap <leader>l :set list!<CR>

" shortcuts
inoremap <expr> vdts strftime("%y%m%d%H%M%S")
inoremap <expr> idts strftime("%FT%T%z")
inoremap <expr> axlg "Axl Mattheus <axl.mattheus@gmail.com>"
inoremap <expr> axlm "Axl Mattheus <axl.mattheus@microsoft.com> (@Microsoft)"
inoremap <expr> axla "Axl Mattheus <axl.mattheus@annaxxko.net> (@annaxxKØ)"

"set foldmethod=expr
set foldmethod=syntax


" solarized
set t_Co=16
let g:solarized_bold       = 1
let g:solarized_italic     = 1
let g:solarized_underline  = 0
set background=dark
colorscheme solarized

let $kernel_version=system('uname -r | tr -d "\n"')
set tags=./tags,tags,../tags,../../tags,../../../tags,../../../../tags,/lib/modules/$kernel_version/build/tags,/usr/include/tags

" erlang
let erlang_folding = 1
let erlang_skel_dir = "~/.vim/skeletons/erlang"


set dictionary=/usr/share/dict/words            " used with CTRL-X CTRL-K
:map <F5> :setlocal spell! spelllang=en_uk<CR>

" powerline
if $POWERLINE != "ON"
    set statusline=%<%f\ %y\ %h%m%r%=%-14.([%n]\ %l,%c%V%)\ %P
endif
if $POWERLINE == "ON"
    set laststatus=2  " Always display the statusline in all windows
    "set showtabline=2 " Always display the tabline, even if there is only one tab
    set noshowmode    " Hide the default mode text (e.g. -- INSERT -- below the statusline)
    set rtp+=/usr/local/lib/python2.7/dist-packages/powerline/bindings/vim
endif


" Rename.vim  -  Rename a buffer within Vim and on the disk
" Copyright June 2007-2011 by Christian J. Robinson <heptite@gmail.com>
" Distributed under the terms of the Vim license.  See ":help license".
"
" Usage:
" :Rename[!] {newname}

command! -nargs=* -complete=file -bang Rename call Rename(<q-args>, '<bang>')

function! Rename(name, bang)
    let l:name    = a:name
    let l:oldfile = expand('%:p')

    if bufexists(fnamemodify(l:name, ':p'))
        if (a:bang ==# '!')
            silent exe bufnr(fnamemodify(l:name, ':p')) . 'bwipe!'
        else
            echohl ErrorMsg
            echomsg 'A buffer with that name already exists (use ! to override).'
            echohl None
            return 0
        endif
    endif

    let l:status = 1

    let v:errmsg = ''
    silent! exe 'saveas' . a:bang . ' ' . l:name

    if v:errmsg =~# '^$\|^E329'
        let l:lastbufnr = bufnr('$')

        if expand('%:p') !=# l:oldfile && filewritable(expand('%:p'))
            if fnamemodify(bufname(l:lastbufnr), ':p') ==# l:oldfile
                silent exe l:lastbufnr . 'bwipe!'
            else
                echohl ErrorMsg
                echomsg 'Could not wipe out the old buffer for some reason.'
                echohl None
                let l:status = 0
            endif

            if delete(l:oldfile) != 0
                echohl ErrorMsg
                echomsg 'Could not delete the old file: ' . l:oldfile
                echohl None
                let l:status = 0
            endif
        else
            echohl ErrorMsg
            echomsg 'Rename failed for some reason.'
            echohl None
            let l:status = 0
        endif
    else
        echoerr v:errmsg
        let l:status = 0
    endif

    return l:status
endfunction

