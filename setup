#!/bin/bash

# where am i?
setup_home="$(pwd)"
clinit_home="${HOME}"/.clinit.d
now="$(date +%Y%m%d%H%M)"

# import bash function library if it is available
err_missing_bsfl=-1
if  [ -f "${setup_home}"/bash/bsfl ]
then
    . "${setup_home}"/bash/bsfl
else
    echo "Missing dependency - bsfl"
    exit ${err_missing_bsfl}
fi

# GATEKEEPER - comment out to add a condition so skip code. add a closing fi
if [ -n "${GATE}" ]
then
    # work of the latest release
    err_dirty_git=-2
    msg_info "Checking git status..."
    if [ -n "$(git status --untracked-files=no --porcelain 2> /dev/null | tail -n1)" ]
    then
        msg_error "Dirty git repository. Please commit, reset, revert or stash changes and try again."
        exit ${err_dirty_git}
    fi
    branch=$(git branch | sed -n -e 's/^\* \(.*\)/\1/p')
    msg_debug "Current git branch is ${branch}."
    # git checkout master
    # git pull origin master
    # git submodule update
fi # GATE

pushd ~

# set up configuration directiry
msg_info "Creating command line initialization directory..."
cmd "mkdir ${clinit_home}"
cmd "mkdir ${clinit_home}/common"
cmd "mkdir ${clinit_home}/backup"
cmd "mkdir ${clinit_home}/bash"
cmd "mkdir ${clinit_home}/dependencies"
cmd "mkdir ${clinit_home}/dependencies/powerline"
cmd "mkdir ${clinit_home}/dependencies/powerline/bash"
cmd "mkdir ${clinit_home}/dependencies/powerline/tmux"
cmd "mkdir ${clinit_home}/dependencies/powerline/vim"
cmd "mkdir ${clinit_home}/dependencies/solarized"
cmd "mkdir ${clinit_home}/dependencies/solarized/dircolors"
cmd "mkdir ${clinit_home}/dependencies/solarized/gedit"
cmd "mkdir ${clinit_home}/dependencies/solarized/tmux"
cmd "mkdir ${clinit_home}/dependencies/solarized/vim"
cmd "mkdir ${clinit_home}/dependencies/solarized/vim/colors"
# add ipython and zsh later...
cmd "mkdir ${clinit_home}/git"
cmd "mkdir ${clinit_home}/tmux"
cmd "mkdir ${clinit_home}/vim"
msg_info "Copying initialization files..."
pushd ${clinit_home}
cmd "cp -R ${setup_home}/common/* common/"
cmd "cp -R ${setup_home}/bash/*   bash/"
pushd dependencies
pushd powerline
cmd "cp -R ${setup_home}/dependencies/powerline/powerline/bindings/bash/* bash/"
cmd "cp -R ${setup_home}/dependencies/powerline/powerline/bindings/tmux/* tmux/"
cmd "cp -R ${setup_home}/dependencies/powerline/powerline/bindings/vim/*  vim/"
# add ipython and zsh later...
popd
pushd solarized
cmd "cp -R ${setup_home}/dependencies/solarized-dircolors/dircolors.256dark dircolors/"
cmd "cp -R ${setup_home}/dependencies/solarized-gedit/*.xml                 gedit/"
cmd "cp -R ${setup_home}/dependencies/solarized-tmux/*.conf                 tmux/"
cmd "cp -R ${setup_home}/dependencies/solarized-vim/colors/solarized.vim    vim/colors/"
popd
popd
cmd "cp -R ${setup_home}/git/*  git/"
cmd "cp -R ${setup_home}/tmux/* tmux/"
cmd "cp -R ${setup_home}/vim/*  vim/"
popd
msg_info "Done copying initialization files..."
msg_info "Done creating command line initialization directory..."

# bash
msg_info "Backing up files..."
if file_exists "${HOME}"/.profile
then
    cmd "mv ${HOME}/.profile ${clinit_home}/backup/profile.${now}"
fi
if file_exists "${HOME}"/.bashrc
then
    cmd "mv ${HOME}/.bashrc ${clinit_home}/backup/bashrc.${now}"
fi
if file_exists "${HOME}"/.bash_logout
then
    cmd "mv ${HOME}/.bash_logout ${clinit_home}/backup/bash_logout.${now}"
fi
msg_info "Done backing up files..."
msg_info "Setting up bash environment..."
cmd "ln -s ${clinit_home}/common/profile    .profile"
cmd "ln -s ${clinit_home}/common/inputrc    .inputrc"
cmd "ln -s ${clinit_home}/bash/bashrc       .bashrc"
cmd "ln -s ${clinit_home}/bash/bash_logout  .bash_logout"
# cmd "ln -s ${clinit_home}/bash/bash_aliases .bash_aliases"
# cmd "ln -s ${clinit_home}/bash/bash_colors  .bash_colors"
# cmd "ln -s ${clinit_home}/bash/bash_prompt  .bash_prompt"
msg_info "Done setting up bash environment..."

# git
msg_info "Setting up git environment..." 
cmd "ln -s ${clinit_home}/git/gitconfig .gitconfig"
cmd "ln -s ${clinit_home}/git/gitignore .gitignore"
cmd "ln -s ${clinit_home}/git/tigrc     .tigrc"
msg_info "Done setting up git environment..." 

# vim
msg_info "Setting up vim environment..." 
cmd "mkdir -p .vim/colors"
cmd "mkdir -p .vim/syntax"
if file_exists "${HOME}"/.vimrc
then
    msg_info "Backing up .vimrc..." 
    cmd "mv ${HOME}/.vimrc ${clinit_home}/backup/vimrc.${now}"
    msg_info "Done backing up .vimrc..." 
fi
cmd "ln -s ${clinit_home}/vim/gvimrc .gvimrc"
cmd "ln -s ${clinit_home}/vim/vimrc  .vimrc"
pushd .vim
cmd "ln -s ${clinit_home}/dependencies/solarized/vim/colors/solarized.vim colors/solarized.vim"
popd
msg_info "Done setting up vim environment..." 

# tmux
msg_info "Setting up tmux environment..." 
if file_exists "${HOME}"/.tmux.conf
then
    msg_info "Backing up .tmux.conf..." 
    cmd "mv ${HOME}/.tmux.conf ${clinit_home}/backup/tmux.conf.${now}"
    msg_info "Done backing up .tmux.conf..." 
fi
cmd "ln -s ${clinit_home}/tmux/tmux.conf .tmux.conf"
msg_info "Done setting up tmux environment..." 

# GATEKEEPER - comment out to add a condition so skip code. add a closing fi
if [ -n "${GATE}" ]
then
    # tmux
    ln -s "${clinit_home}"/tmux/ax_tmux.conf .tmux.conf

    msg_info "Configuring powerline..."
    # powerline
    mkdir "${HOME}"/.fonts.conf.d
    cp "${clinit_home}"/powerline/font/10-powerline-symbols.conf "${HOME}"/.fonts.conf.d/
    mkdir "${HOME}"/.fonts
    cp "${clinit_home}"/powerline/font/PowerlineSymbols.otf "${HOME}"/.fonts/
    # TODO: `apt-get install fontconfig` if it does not exist
    sudo apt-get install fontconfig
    mkdir "${HOME}"/.config/powerline
    cp -r "${clinit_home}"/powerline/powerline/config_files/* "${HOME}"/.config/powerline/

    git checkout ${branch}
fi # GATE

popd


