# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias colorls='ls --color=auto '
    alias colordir='dir --color=auto '
    #alias vdir='vdir --color=auto'

    alias colorgrep='egrep --color=auto '
    alias colorfgrep='GREP_COLORS=fn=93:ln=96:se=93 fgrep --color=auto '
    alias colorrgrep='rgrep --color=auto '
    alias colorpgrep='pcregrep --color=auto '
fi

# aliases
# alias vbox-list-running='vboxmanage list runningvms '
# alias vbox-list='vboxmanage list vms '
# alias vbox-start='vboxmanage startvm '
# alias wsdlpull='LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/lib wsdlpull '
# shortcut
alias cp='cp -uv '
alias lsmnt='mount | column -t | grep ^\/dev '
alias lsrm='yes no | /bin/rm -ri '
alias mem='cat /proc/meminfo '
alias mv='mv -uv '
alias ssh='TERM=xterm ssh -X '
alias sweep='find . -iname **~ -type f -exec mv2trash {} \; '
alias top='htop '
alias tree-list-directories='tree -d '
alias tree='tree -F -I *~ '
alias xmlprety='xmllint --format '
alias xmltidy='tidy -w 100 -q -i -xml '
# date
alias date-iso8601='date +%Y-%m-%dT%H:%M:%S '
alias date-sync='sudo ntpdate ntp.ubuntu.com '
alias date-timestamp-nanos='date +%Y%m%d%H%M%S%N '
alias date-timestamp='date +%Y%m%d%H%M%S '
# directory
alias ...='cd ../.. '
alias ..='cd .. '
alias :q='exit '
alias cd..='cd ..'
alias df='df -h '
alias dir='colordir '
alias du='du -h '
alias size='du -shx '
# find
alias fgrep='colorfgrep '
alias grep='colorgrep '
alias ngrep='grep -v '
alias rgrep='colorrgrep '
alias pgrep='colorpgrep '
# list
alias l1='ls -1 '
alias l='l1 '
alias lN='ls -n '
alias lS='ls -S '
alias la='ls -A '
alias li='ll -i '
alias ll='ls -l -k -h '
alias llS='ll -S '
alias lld='tree -ifd --noreport --dirsfirst '
alias llf='tree -if --noreport '
alias ls='colorls --hide='*~' --hide='.*~' -F -I CVS --group-directories-first -X '
alias lsb='find . -iname **~ -type f 2>/dev/null '
alias lsd='find "$(pwd)" -mindepth 1 -maxdepth 1 -type d | sort '
alias lsf='find "$(pwd)" -maxdepth 1 -type f | sort '
# misc
alias mark='echo -e "\n ================== $(date-iso8601) =================\n" '
alias matrix-green='MATRIX_COLOR="${GREEN_MATRIX}" matrix '
alias matrix-red='MATRIX_COLOR="${RED_MATRIX}" matrix '
# python
alias python='python3 '
# ruby
alias ruby='ruby2.0 '
alias irb='irb2.0 '
# r?
alias r='fc -s '
# tmux
alias tmux-attach='tmux attach-session -t '
alias tmux-kill='tmux kill-session -t '
alias tmux-list='tmux list-sessions '
alias tmux-session='tmux new-session -s '
alias tma='tmux attach-session -t '
alias tmd='~/.clinit.d/tmux/tmd '
alias tmk='tmux kill-session -t '
alias tml='tmux list-sessions '
alias tms='tmux new-session -s '
alias tmvim='TERM=screen-256color vim '
alias tmtop='TERM=screen-256color top '
# incognito
alias I=' ' # everything prepended with I, followed by a space will not show up in history!

# utility functions
# if [ -n "$PS1" ] ; then
#     vbox-kill ()
#     {
#         vboxmanage controlvm ${1} poweroff
#     }
# fi
# 
# if [ -n "$PS1" ] ; then
#     vbox-start-background()
#     {
#         vboxmanage startvm ${1} --type headless
#     }
# fi

# tmux functions
tmux-shortcuts() {
    off=$(tput sgr0)
    bon=$(tput bold)        # bold on
    boff=${off}             # bold off
    fb=$(tput setaf 0)      # back foreground
    fr=$(tput setaf 1)      # red foreground
    fg=$(tput setaf 2)      # green foreground
    fy=$(tput setaf 3)      # yellow foreground
    fl=$(tput setaf 4)      # blue foreground
    fm=$(tput setaf 5)      # magenta foreground
    fc=$(tput setaf 6)      # cyan foreground
    fw=$(tput setaf 6)      # white foreground
    coff=${off}             # color off
    echo "${bon}Note on trigger:${boff}"
    echo "  By default the tmux trigger sequence is Ctrl+b, it was remapped to Crtl+a."
    echo "  Crtl+a is referred to as \"Trigger\" throughout."
    echo "  See ~/.tmux.conf for more information."
    echo ""
    echo "${bon}Bindings${boff}"
    echo "  ${bon}List${boff} key bindings:                     ${bon}Trigger,?${boff}"
    echo ""
    echo "${bon}Session management${boff}"
    echo "  ${bon}Create${boff} a session:                      ${bon}tmux-session {session}${boff}"
    echo "  ${bon}Detach${boff} from a session:                 ${bon}Trigger,d${boff}"
    echo "  ${bon}Attach${boff} to a session:                   ${bon}tmux-attach {session}${boff}"
    echo "  ${bon}Rename${boff} a session:                      ${bon}Trigger,\$${boff}"
    echo ""
    echo "${bon}Window commands${boff}"
    echo "  ${bon}Create${boff} a window:                       ${bon}Trigger,c${boff}"
    echo "  ${bon}Rename${boff} a window:                       ${bon}Trigger,,${boff}"
    echo "  ${bon}List${boff} windows:                          ${bon}Trigger,w${boff}"
    echo "  ${bon}Next${boff} window:                           ${bon}Trigger,n${boff}"
    echo "  ${bon}Previous${boff} window:                       ${bon}Trigger,p${boff}"
    echo "  ${bon}Select${boff} to window number:               ${bon}Trigger,{number}${boff}"
    echo "  ${bon}Kill${boff} window:                           ${bon}Trigger,&${boff}"
    echo ""
    echo "${bon}Pane commands${boff}"
    echo "  Divide pane ${bon}horzontally${boff}:               ${bon}Trigger,-${boff}"
    echo "  Divide pane ${bon}vertically${boff}:                ${bon}Trigger,|${boff}"
    echo "  Display pane ${bon}numbers${boff}:                  ${bon}Trigger,q${boff}"
    echo "  Enter pane ${bon}scroll${boff} mode:                ${bon}Trigger,[${boff}"
    echo "    Use arrow keys and PgUp and PgDn to scroll."
    echo "    Press Enter to exit scroll mode."
    echo "  ${bon}Cycle${boff} panes:                           ${bon}Trigger,o${boff}"
    echo "  Select ${bon}left${boff}:                           ${bon}Trigger,h${boff}"
    echo "  Select ${bon}down${boff}:                           ${bon}Trigger,j${boff}"
    echo "  Select ${bon}up${boff}:                             ${bon}Trigger,k${boff}"
    echo "  Select ${bon}right${boff}:                          ${bon}Trigger,l${boff}"
    echo "  ${bon}${fy}NOTE${boff}:"
    echo "    You can also navigate panes using the arrow keys."
    echo "  Resize ${bon}left${boff}:                           ${bon}Trigger,H${boff}"
    echo "  Resize ${bon}down${boff}:                           ${bon}Trigger,J${boff}"
    echo "  Resize ${bon}up${boff}:                             ${bon}Trigger,K${boff}"
    echo "  Resize ${bon}right${boff}:                          ${bon}Trigger,L${boff}"
    echo "  ${bon}Cycle${boff} layouts:                         ${bon}Trigger,Space${boff}"
    echo "  ${bon}Kill${boff} pane:                             ${bon}Trigger,x${boff}"
    echo "  ${fy}echo${coff} all panes ${bon}ON${boff}:                     ${bon}Trigger,E${boff}"
    echo "  ${fy}echo${coff} all panes ${bon}OFF${boff}:                    ${bon}Trigger,e${boff}"
    echo ""
    echo "${bon}vi mode${boff}"
    echo "  ${bon}Enter${boff} vi mode:                         ${bon}Trigger,Escape${boff}"
    echo "  ${bon}Exit${boff} vi mode:                          ${bon}q${boff}"
    echo "  ${bon}Select${boff} text:                           ${bon}v${boff}"
    echo "  ${bon}Copy${boff} text:                             ${bon}y${boff}"
    echo "  ${bon}Paste${boff} text:                            ${bon}Trigger,p${boff}"
    echo "  ${bon}${fy}NOTE${boff}:"
    echo "    Use vi keystrokes as usual in vi mode."
    echo ""
    echo "${bon}Commands${boff}"
    echo "  ${bon}Enter${boff} command mode:                    ${bon}Trigger,:${boff}"
}

# system replacement functionions
if [ -n "$PS1" ] ; then
    rm ()
    {
        ls -sd "$@"
        echo 'remove[ny]? ' | tr -d '\012' ; read
        if [ "_$REPLY" = "_y" ]; then
            /bin/rm -vrf "$@"
        else
            echo '(cancelled)'
        fi
    }
fi

if [ -n "$PS1" ] ; then
    if [ -f $(which srm) ] ; then
        srm ()
        {
            ls -sd "$@"
            echo 'remove[ny]? ' | tr -d '\012' ; read
            if [ "_$REPLY" = "_y" ]; then
                $(which srm) -vrf "$@"
            else
                echo '(cancelled)'
            fi
        }
    else
      echo 'srm is not installed.'
      echo 'Try installing it with apt-get install secure-delete on Ubuntu.'
    fi
fi

pause() {
    read -p "$1"
}

# kernel management functions
if [ -n "$PS1" ] ; then
    list-old-kernels()
    {
        dpkg -l linux-* | awk '/^ii/{ print $2}' | grep -v -e $(uname -r | cut -f1,2 -d"-") | grep -e [0-9]
    }
fi

if [ -n "$PS1" ] ; then
    remove-old-kernels()
    {
        list-old-kernels
        echo 'remove[ny]? ' | tr -d '\012' ; read
        if [ "_$REPLY" = "_y" ]; then
            dpkg -l linux-* | awk '/^ii/{ print $2}' | grep -v -e $(uname -r | cut -f1,2 -d"-") | grep -e [0-9] | xargs sudo apt-get -y purge
         else
            echo '(cancelled)'
        fi
    }
fi

# play functions
if [ -n "$PS1" ] ; then
    RED_MATRIX='\e[31m'
    GREEN_MATRIX='\e[32m'
    matrix()
    {
        echo -ne "${MATRIX_COLOR}"
        while true ; do
            echo -ne "\e[$(($RANDOM % 3 + 1))m"
            tr -c "[:print:]" " " < /dev/urandom | dd count=1 bs=50 2> /dev/null
        done
    }
fi

if [ -n "$PS1" ] ; then
    if [ -f $(which mvn) ] ; then
        M2_HOME=/opt/axlm/apache-maven-3.0.4
        M2=${M2_HOME}/bin
        mvn ()
        {
            $(which mvn) "$@"
        }
    else
      echo '(mvn is not installed)'
    fi
fi


