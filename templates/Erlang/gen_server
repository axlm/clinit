-module($MODULENAME).
-behaviour(gen_server).
-export([ % Life cycle
         start_link/0,
         stop/0
        ]).
-export([ % API
         echo/1
        ]).
-export([ % Callbacks
         init/1,
         handle_call/3,
         handle_cast/2,
         handle_info/2,
         terminate/2,
         code_change/3
        ]).



%% LIFE CYCLE ====================================================== %
%% start_link/0
%%--------------------------------------------------------------------
%% @doc Start the process
%% @todo -spec().
%% @todo Does a supervised server need a start_link?
%%------------------------------------------------------------------ %
start_link() ->
    gen_server:start_link({local, ?MODULE}, ?MODULE, [], []).

%% stop/0
%%--------------------------------------------------------------------
%% @doc Stop the process
%% @todo -spec().
%% @todo Does a supervised server need a stop?
%%------------------------------------------------------------------ %
stop() ->
    gen_server:cast(?MODULE, stop).



%% API ============================================================= %
%% echo/1
%%--------------------------------------------------------------------
%% @doc My function
%% @todo -spec().
%%------------------------------------------------------------------ %
echo(Message) ->
    gen_server:call(?MODULE, {echo, Message}).



%% Callbacks ======================================================= %
-record(state, {}).

%% init/1
%% -------------------------------------------------------------------
%% @doc <a href="http://goo.gl/oatdlm">gen_server:init/1</a>
-spec(init(Args :: term())
      -> Result when
      Result :: {ok, State}
      | {ok, State, Timeout}
      | {ok, State, hibernate}
      | {stop, Reason :: term()}
      | ignore, State :: term(),
      Timeout :: non_neg_integer() | infinity).
%% ----------------------------------------------------------------- %
init([]) ->
    {ok, #state{}}.

%% handle_call/3
%% -------------------------------------------------------------------
%% @doc <a href="http://goo.gl/zOPmXd">gen_server:handle_call/3</a>
-spec(handle_call(
        Request :: term(),
        From :: {pid(), Tag :: term()},
        State :: term())
      -> Result when
      Result :: {reply, Reply, NewState}
      | {reply, Reply, NewState, Timeout}
      | {reply, Reply, NewState, hibernate}
      | {noreply, NewState}
      | {noreply, NewState, Timeout}
      | {noreply, NewState, hibernate}
      | {stop, Reason, Reply, NewState}
      | {stop, Reason, NewState},
      Reply :: term(),
      NewState :: term(),
      Timeout :: non_neg_integer() | infinity,
      Reason :: term()).
%% ----------------------------------------------------------------- %
handle_call({echo, Message}, From, State) ->
    Result = io:format("Got ~p from ~p!", [Message, From]),
    {reply, Result, State};
handle_call(_Request, _From, State) ->
    Reply = ok,
    {reply, Reply, State}.

%% handle_cast/2
%% -------------------------------------------------------------------
%% @doc <a href="http://goo.gl/qk70bY">gen_server:handle_cast/2</a>
-spec(handle_cast(Request :: term(), State :: term())
      -> Result when
      Result :: {noreply, NewState}
      | {noreply, NewState, Timeout}
      | {noreply, NewState, hibernate}
      | {stop, Reason :: term(), NewState},
      NewState :: term(),
      Timeout :: non_neg_integer() | infinity).
%% ----------------------------------------------------------------- %
handle_cast(stop, State) ->
    {stop, normal, State};
handle_cast(_Msg, State) ->
    {noreply, State}.

%% handle_info/2
%% -------------------------------------------------------------------
%% @doc <a href="http://goo.gl/MCXv6Y">gen_server:handle_info/2</a>
-spec(handle_info(Info :: timeout | term(), State :: term())
      -> Result when
      Result :: {noreply, NewState}
      | {noreply, NewState, Timeout}
      | {noreply, NewState, hibernate}
      | {stop, Reason :: term(), NewState},
      NewState :: term(),
      Timeout :: non_neg_integer() | infinity).
%% ----------------------------------------------------------------- %
handle_info(_Info, State) ->
    {noreply, State}.

%% terminate/2
%% -------------------------------------------------------------------
%% @doc <a href="http://goo.gl/Ce2h4O">gen_server:terminate/2</a>
-spec(terminate(Reason, State :: term())
      -> Any :: term() when
      Reason :: normal
      | shutdown
      | {shutdown, term()}
      | term()).
%% ----------------------------------------------------------------- %
terminate(_Reason, _State) ->
    ok.

%% code_change/3
%% -------------------------------------------------------------------
%% @doc <a href="http://goo.gl/rqyPa8">gen_server:code_change/3</a>
-spec(code_change(OldVsn, State :: term(), Extra :: term())
      -> Result when
      Result :: {ok, NewState :: term()} | {error, Reason :: term()},
      OldVsn :: Vsn | {down, Vsn},
      Vsn :: term()).
%% ----------------------------------------------------------------- %
code_change(_OldVsn, State, _Extra) ->
    {ok, State}.



%% Private ========================================================= %

