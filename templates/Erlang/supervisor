-module($MODULENAME).
-behaviour(supervisor).
-export([ % API
          start_link/0
        ]).
-export([ % Behaviour
          init/1
        ]).
-include("anx_supervisor_utilities.hrl").
-include("anx_debug_utilities.hrl").



%% API ============================================================= %
%% start_link/0
%% -------------------------------------------------------------------
%% @doc
%% @todo -spec().
%% ----------------------------------------------------------------- %
start_link() ->
    supervisor:start_link({local, 'TODO: fqn goes here'}, ?MODULE, []).



%% Behaviour ======================================================= %
%% init/1
%% -------------------------------------------------------------------
%% @doc <a href="http://goo.gl/tjykNo">supervisor:init/1</a>
-type(restart_strategy() :: one_for_one | one_for_all | rest_for_one | simple_one_for_one).
-type(supervision_policy()  :: {
        RestartStrategy         :: restart_strategy(),
        MaximumRestartsInPeriod :: non_neg_integer(),
        PeriodLengthInSeconds   :: pos_integer()}).
-type(start_function() :: {M :: module(), F :: atom(), A :: [term()] | undefined}).
-type(modules() :: [module()] | dynamic).
-type(child_specification() :: {
        ChildId       :: term(),
        StartFunction :: start_function(),
        RestartPolicy :: permanent | transient | temporary,
        Modules       :: modules()}).
-spec(init(Args :: term())
        -> Result when
        Result :: {ok, {SupervisionPolicy :: supervision_policy(),
                        [ChildSpecification :: child_specification()]}}
                | ignore).
%% ----------------------------------------------------------------- %
init([]) ->
    SupervisionPolicy = ?RESTART_ALL(0, 1),
    Child = ?PERMANENT_WORKER('Id', 'Module', []),
    {ok, {SupervisionPolicy, [Child]}}.



%% Private ========================================================= %

