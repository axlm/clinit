-module($MODULENAME).
-behaviour(gen_fsm).
-export([]).
-export([
         init/1,
         state_name/2,
         state_name/3,
         handle_event/3,
         handle_sync_event/4,
         handle_info/3,
         terminate/3,
         code_change/4
        ]).



%% API ============================================================= %



%% Behaviour ======================================================= %
-record(state, {}).

%% init/1
%% -------------------------------------------------------------------
%% @doc <a href="http://goo.gl/D9IFzt">gen_fsm:init/1</a>
-spec(init(Args :: term()) -> Result when
      Result :: {ok, StateName, StateData}
      | {ok, StateName, StateData, Timeout}
      | {ok, StateName, StateData, hibernate}
      | {stop, Reason}
      | ignore, StateName :: atom(),
      StateData :: term(),
      Timeout :: non_neg_integer() | infinity,
      Reason :: term()).
%% ----------------------------------------------------------------- %
init([]) ->
    {ok, state_name, #state{}}.

%% state_name/2
%% -------------------------------------------------------------------
%% @doc <a href="http://goo.gl/3Eosln">gen_fsm:StateName/2</a>
-spec(state_name(
        Event :: timeout | term(),
        StateData :: term())
      -> Result when
      Result :: {next_state, NextStateName, NewStateData}
      | {next_state, NextStateName, NewStateData, Timeout}
      | {next_state, NextStateName, NewStateData, hibernate}
      | {stop, Reason, NewStateData},
      NextStateName :: atom(),
      NewStateData :: term(),
      Timeout :: non_neg_integer() | infinity,
      Reason :: term()).
%% ----------------------------------------------------------------- %
% @todo implement actual state
state_name(_Event, StateData) ->
    {next_state, state_name, StateData}.

%% state_name/3
%% -------------------------------------------------------------------
%% @doc <a href="http://goo.gl/xwSdQe">gen_fsm:StateName/3</a>
-spec(state_name(
        Event :: term(),
        From :: {pid(), Tag :: term()},
        StateData :: term())
      -> Result when
      Result :: {reply, Reply, NextStateName, NewStateData}
      | {reply, Reply, NextStateName, NewStateData, Timeout}
      | {reply, Reply, NextStateName, NewStateData, hibernate}
      | {next_state, NextStateName, NewStateData}
      | {next_state, NextStateName, NewStateData, Timeout}
      | {next_state, NextStateName, NewStateData, hibernate}
      | {stop, Reason, Reply, NewStateData}
      | {stop, Reason, NewStateData},
      Reply :: term(),
      NextStateName :: atom(),
      NewStateData :: atom(),
      Timeout :: non_neg_integer() | infinity,
      Reason :: normal | term()).
%% ----------------------------------------------------------------- %
state_name(_Event, _From, StateData) ->
    Reply = ok,
    {reply, Reply, state_name, StateData}.

%% handle_event/3
%% -------------------------------------------------------------------
%% @doc <a href="http://goo.gl/vtw0Yg">gen_fsm:handle_event/3</a>
-spec(handle_event(
        Event :: term(),
        StateName :: atom(),
        StateData :: term())
      -> Result when
      Result :: {next_state, NextStateName, NewStateData}
      | {next_state, NextStateName, NewStateData, Timeout}
      | {next_state, NextStateName, NewStateData, hibernate}
      | {stop, Reason, NewStateData},
      NextStateName :: atom(),
      NewStateData :: term(),
      Timeout :: non_neg_integer() | infinity,
      Reason :: term()).
%% ----------------------------------------------------------------- %
handle_event(_Event, StateName, StateData) ->
    {next_state, StateName, StateData}.

%% handle_sync_event/4
%% -------------------------------------------------------------------
%% @doc <a href="http://goo.gl/k0Ox3v">gen_fsm:handle_sync_event/4</a>
-spec(handle_sync_event(
        Event :: term(),
        From :: {pid(), Tag :: term()},
        StateName :: atom(),
        StateData :: term())
      -> Result when
      Result :: {reply, Reply, NextStateName, NewStateData}
      | {reply, Reply, NextStateName, NewStateData, Timeout}
      | {reply, Reply, NextStateName, NewStateData, hibernate}
      | {next_state, NextStateName, NewStateData}
      | {next_state, NextStateName, NewStateData, Timeout}
      | {next_state, NextStateName, NewStateData, hibernate}
      | {stop, Reason, Reply, NewStateData}
      | {stop, Reason, NewStateData},
      Reply :: term(),
      NextStateName :: atom(),
      NewStateData :: term(),
      Timeout :: non_neg_integer() | infinity,
      Reason :: term()).
%% ----------------------------------------------------------------- %
handle_sync_event(_Event, _From, StateName, StateData) ->
    Reply = ok,
    {reply, Reply, StateName, StateData}.

%% handle_info/3
%% -------------------------------------------------------------------
%% @doc <a href="http://goo.gl/cYv3I2">gen_fsm:handle_info/3</a>
-spec(handle_info(
        Info :: term(),
        StateName :: atom(),
        StateData :: term())
      -> Result when
      Result :: {next_state, NextStateName, NewStateData}
      | {next_state, NextStateName, NewStateData, Timeout}
      | {next_state, NextStateName, NewStateData, hibernate}
      | {stop, Reason, NewStateData},
      NextStateName :: atom(),
      NewStateData :: term(),
      Timeout :: non_neg_integer() | infinity,
      Reason :: normal | term()).
%% ----------------------------------------------------------------- %
handle_info(_Info, StateName, StateData) ->
    {next_state, StateName, StateData}.

%% terminate/3
%% -------------------------------------------------------------------
%% @doc <a href="http://goo.gl/WdXFhz">gen_fsm:terminate/3</a>
-spec(terminate(
        Reason,
        StateName :: atom(),
        StateData :: term())
      -> Result :: term() when
      Reason :: normal
      | shutdown
      | {shutdown, term()}
      | term()).
%% ----------------------------------------------------------------- %
terminate(_Reason, _StateName, _StateData) ->
    ok.

%% code_change/4
%% -------------------------------------------------------------------
%% @doc <a href="http://goo.gl/eFgA12">gen_fsm:code_change/4</a>
-spec(code_change(
        OldVsn, StateName :: atom(),
        StateData :: term(),
        Extra :: term())
      -> {ok, NextStateName :: atom(), NewStateData :: term()} when
      OldVsn :: Vsn | {down, Vsn},
      Vsn :: term()).
%% ----------------------------------------------------------------- %
code_change(_OldVsn, StateName, StateData, _Extra) ->
    {ok, StateName, StateData}.



%% Private ========================================================= %

